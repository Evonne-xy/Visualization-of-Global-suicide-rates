sum(vec1)
vec1 + vec2
mat
mat [,1] [,2] [,3]
mat=matrix(data=c(9,2,3,4,5,6),ncol=3)
mat
vec1 = seq(from 31, to=60, by=1)
vec1 = seq(from=31, to=60, by=1)
vec1
mat=matrix(data=vec1, ncol=5, nrow=6)
mat
mat[1,2]
mat[2,]
mat[,3]
mean(mat)
t = data.frame(x = c(11,12,14))
t = data.frame(x = c(11,12,14)),y=c(19,20,21),z=c(10,9,7))
t = data.frame(x = c(11,12,14))y=c(19,20,21),z=c(10,9,7))
t = data.frame(x = c(11,12,14))
y=c(19,20,21),z=c(10,9,7))
y=c(19,20,21)
z=c(10,9,7))
z=c(10,9,7)
t = data.frame(x = c(11,12,14),y=c(19,20,21),z=c(10,9,7))
t
mean(t$z)
mean(t[["z"]])
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
install.packages("ggplot2")
install.packages("ggmap")
install.packages("maps")
install.packages("mapproj")
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
library(maps)
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state')
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
data <- read.csv("Household-heating-by-State-2008.csv", header=T)
head(data)
names(data)
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
data <- read.csv("Household-heating-by-State-2008.csv", header=T)
head(data)
names(data)
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
data <- read.csv("Household-heating-by-State-2008.csv", header=T)
head(data)
names(data)
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
data <- read.csv("Household-heating-by-State-2008.csv", header=T)
head(data)
names(data)
setwd("E:/R-studio/R-working directory")
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
data <- read.csv("Household-heating-by-State-2008.csv", header=T)
head(data)
names(data)
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
data <- read.csv("Household-heating-by-State-2008.csv", header=T)
head(data)
names(data)
names(data)[4]<- "MobileHomes"
names(data)
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
data <- read.csv("Household-heating-by-State-2008.csv", header=T)
head(data)
names(data)
names(data)[4]<- "MobileHomes"
names(data)
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
data <- read.csv("Household-heating-by-State-2008.csv", header=T)
head(data)
names(data)
#step 3
names(data)[4]<- "MobileHomes"
names(data)
#step 4
ag <- aggregate(MobileHomes ~ states, Fun=mean, data=data)
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
data <- read.csv("Household-heating-by-State-2008.csv", header=T)
head(data)
names(data)
#step 3
names(data)[4]<- "MobileHomes"
names(data)
#step 4
ag <- aggregate(MobileHomes ~ States, Fun=mean, data=data)
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
data <- read.csv("Household-heating-by-State-2008.csv", header=T)
head(data)
names(data)
#step 3
names(data)[4]<- "MobileHomes"
names(data)
#step 4
ag <- aggregate(MobileHomes ~ States, Fun = mean, data = data)
ag <- aggregate(MobileHomes ~ States, FUN = mean, data = data)
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
data <- read.csv("Household-heating-by-State-2008.csv", header=T)
head(data)
names(data)
#step 3
names(data)[4]<- "MobileHomes"
names(data)
#step 4
ag <- aggregate(MobileHomes ~ States, FUN = mean, data = data)
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
data <- read.csv("Household-heating-by-State-2008.csv", header=T)
head(data)
names(data)
#step 3
names(data)[4]<- "MobileHomes"
names(data)
#step 4
ag <- aggregate(MobileHomes ~ States, FUN = mean, data = data)
head(ag)
dim(ag)
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
data <- read.csv("Household-heating-by-State-2008.csv", header=T)
head(data)
names(data)
#step 3
names(data)[4]<- "MobileHomes"
names(data)
#step 4
ag <- aggregate(MobileHomes ~ States, FUN = mean, data = data)
head(ag)
dim(ag)
#step 5
m.usa <- map_data("state") #we want the states
head(m.usa)
dim(m.usa) #more info than we need
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
data <- read.csv("Household-heating-by-State-2008.csv", header=T)
head(data)
names(data)
#step 3
names(data)[4]<- "MobileHomes"
names(data)
#step 4
ag <- aggregate(MobileHomes ~ States, FUN = mean, data = data)
head(ag)
dim(ag)
#step 5
m.usa <- map_data("state") #we want the states
head(m.usa)
dim(m.usa) #more info than we need
#step 6
df <- data.frame(region = tolower(ag$States),MobileHomes=ag$MobileHomes,stringAsFactors=F)
dim(df)
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
data <- read.csv("Household-heating-by-State-2008.csv", header=T)
head(data)
names(data)
#step 3
names(data)[4]<- "MobileHomes"
names(data)
#step 4
ag <- aggregate(MobileHomes ~ States, FUN = mean, data = data)
head(ag)
dim(ag)
#step 5
m.usa <- map_data("state") #we want the states
head(m.usa)
dim(m.usa) #more info than we need
#step 6
df <- data.frame(region = tolower(ag$States),MobileHomes=ag$MobileHomes,stringAsFactors=F)
dim(df)
#step 7
# Create a empty canvas
ggplot(df, aes(map_id = region)) +
# draw the grid
expand_limits(x = m.usa$long, y = m.usa$lat) +
# draw a us map, fill = MobileHomes means color the map according to MobileHomes property
geom_map(aes(fill = MobileHomes), map = m.usa) +
# fix the ratio of the x and y axises, to match a map
coord_map()
library(ggmap)
library(ggplot2)
library(maps)
library(mapproj)
# or you can try e.g. require(maps)
# map("usa")
map('state') # not necessary, just checking we can draw a map
data <- read.csv("Household-heating-by-State-2008.csv", header=T)
head(data)
names(data)
#step 3
names(data)[4]<- "MobileHomes"
names(data)
#step 4
ag <- aggregate(MobileHomes ~ States, FUN = mean, data = data)
head(ag)
dim(ag)
#step 5
m.usa <- map_data("state") #we want the states
head(m.usa)
dim(m.usa) #more info than we need
#step 6
df <- data.frame(region = tolower(ag$States),MobileHomes=ag$MobileHomes,stringAsFactors=F)
dim(df)
#step 7
# Create a empty canvas
ggplot(df, aes(map_id = region)) +
# draw the grid
expand_limits(x = m.usa$long, y = m.usa$lat) +
# draw a us map, fill = MobileHomes means color the map according to MobileHomes property
geom_map(aes(fill = MobileHomes), map = m.usa) +
# fix the ratio of the x and y axises, to match a map
coord_map()
myData <- read.csv('sample-data-for-r-plot.csv')
View(myData)
View(myData)
View(myData)
View(myData)
ggplot(myData, aes(Year, Number)) + geom_point()
library(ggplot2)
ggplot(myData, aes(Year, Number)) + geom_point()
ggplot(myData, aes(Year, Number)) + geom_point(aes(shape = Sex))
load("C:/Users/78155/Desktop/5147linken/chicData/.RData")
install.packages(c("ggforce", "ggrepel", "ggridges", "ggthemes", "patchwork", "tidyverse"))
install.packages(c("ggforce", "ggrepel", "ggridges", "ggthemes", "patchwork", "tidyverse"))
install.packages(c("ggforce", "ggrepel", "ggridges", "ggthemes", "patchwork", "tidyverse"))
install.packages(c("ggforce", "ggrepel", "ggridges", "ggthemes", "patchwork", "tidyverse"))
install.packages(c("ggforce", "ggrepel", "ggridges", "ggthemes", "patchwork", "tidyverse"))
install.packages(c("ggforce", "ggrepel", "ggridges", "ggthemes", "patchwork", "tidyverse"))
# Load necessary packages.
library(flexdashboard) # Dashboard package
install.packages("shinydashboard")
library(highcharter) # Interactive data visualizations
install.packages("highcharter")
library(viridis) # Color gradients
library(viridis) # Color gradients
library(tidyverse) # Metapackge
install.packages("tidyverse")
library(countrycode) # Converting country names/codes
install.packages("countrycode")
library(DT)
install.packages("DT")
install.packages("crosstalk")
install.packages("plotly")
library(DT) # Displaying data tables
library(crosstalk) # Provides interactivity for HTML widgets
library(plotly) # Interactive data visualizations
# Read in data.
data <- read.csv('https://raw.githubusercontent.com/SabaTavoosi/Suicide-data---Interactive-dashboard/master/master.csv') %>%
filter(year != 2016, # filter out 2016 and countries with 0 data.
country != 'Dominica',
country != 'Saint Kitts and Nevis')
# Read in data.
data <- read.csv('https://raw.githubusercontent.com/SabaTavoosi/Suicide-data---Interactive-dashboard/master/master.csv') %>%
filter(year != 2016, # filter out 2016 and countries with 0 data.
country != 'Dominica',
country != 'Saint Kitts and Nevis')
# Load necessary packages.
library(flexdashboard) # Dashboard package
install.packages("flexdashboard")
# Load necessary packages.
library(flexdashboard) # Dashboard package
library(highcharter) # Interactive data visualizations
update.packages ()
# Load necessary packages.
library(flexdashboard) # Dashboard package
library(highcharter) # Interactive data visualizations
install.packages ("highcharter")
# Load necessary packages.
library(flexdashboard) # Dashboard package
library(highcharter) # Interactive data visualizations
remove.packages(c("highcharter", "data.table"))
install.packages('highcharter', dependencies = TRUE)
install.packages('data.table', dependencies = TRUE)
install.packages("data.table", dependencies = TRUE)
# Load necessary packages.
library(flexdashboard) # Dashboard package
library(highcharter) # Interactive data visualizations
# Load necessary packages.
library(flexdashboard) # Dashboard package
library(highcharter) # Interactive data visualizations
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
# Load necessary packages.
library(flexdashboard) # Dashboard package
library(highcharter) # Interactive data visualizations
library(rlang)
sessionInfo()
installr: install.packages("installr")
install.packages("installr")
library(installr)
updateR()
updateR()
# Load necessary packages.
library(flexdashboard) # Dashboard package
library(highcharter) # Interactive data visualizations
update.packages()
# Load necessary packages.
library(flexdashboard) # Dashboard package
library(highcharter) # Interactive data visualizations
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
install_github("r-lib/rlang", build_vignettes = TRUE)
install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_0.2.2.tar.gz", repo=NULL, type="source")
# Load necessary packages.
library(flexdashboard) # Dashboard package
library(highcharter) # Interactive data visualizations
install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_0.4.6.tar.gz", repo=NULL, type="source")
remotes::install_github("r-lib/rlang")
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
install.packages("https://github.com/r-lib/rlang", repo=NULL, type="source")
install.packages("https://cran.r-project.org/bin/windows/contrib/4.1/rlang_0.4.6.zip", repo=NULL, type="source")
# Load necessary packages.
library(flexdashboard) # Dashboard package
library(highcharter) # Interactive data visualizations
# Load necessary packages.
library(flexdashboard) # Dashboard package
library(highcharter) # Interactive data visualizations
# Load necessary packages.
library(flexdashboard) # Dashboard package
library(highcharter) # Interactive data visualizations
update.packages(ask = FALSE)
# Load necessary packages.
library(flexdashboard) # Dashboard package
library(highcharter) # Interactive data visualizations
.libpaths()
install.packages("tribble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
setwd("E:/R-studio/R-working directory/Narrative Visualisation Project")
shiny::runApp()
